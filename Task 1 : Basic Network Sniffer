
import socket
import struct
import textwrap

# Function to parse Ethernet frames:
def parse_ethernet_frame(data):
    """Extracts MAC addresses and protocol information from the Ethernet frame."""
    dest_mac, src_mac, proto = struct.unpack('! 6s 6s H', data[:14])
    return convert_mac(dest_mac), convert_mac(src_mac), socket.htons(proto), data[14:]

def convert_mac(mac):
    """Converts a MAC address into a readable string format."""
    return ':'.join(map('{:02x}'.format, mac)).upper()

def parse_ipv4_packet(data):
    """Extracts information from the IPv4 header."""
    version_header_length = data[0]
    version = version_header_length >> 4
    header_length = (version_header_length & 15) * 4
    ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', data[:20])
    return version, header_length, ttl, proto, format_ipv4(src), format_ipv4(target), data[header_length:]

def format_ipv4(addr):
    """Converts a binary IPv4 address to a dotted-decimal string."""
    return '.'.join(map(str, addr))

def log_raw_data(data):
    """Formats raw packet data for better readability."""
    return '\n'.join(textwrap.wrap(' '.join('{:02x}'.format(byte) for byte in data), width=50))

def main():
    print("Network Sniffer is starting...")
    print("Make sure to run this script with admin privileges (sudo).")

    try:
        # Create raw socket to capture traffic
        conn = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))

        while True:
            raw_data, addr = conn.recvfrom(65536)
            dest_mac, src_mac, eth_proto, data = parse_ethernet_frame(raw_data)
            print(f'\nEthernet Frame:')
            print(f'  Destination: {dest_mac}, Source: {src_mac}, Protocol: {eth_proto}')

            # Process IPv4 packets
            if eth_proto == 8:
                version, header_length, ttl, proto, src, target, data = parse_ipv4_packet(data)
                print(f'  IPv4 Packet:')
                print(f'    Version: {version}, Header Length: {header_length}, TTL: {ttl}')
                print(f'    Protocol: {proto}, Source: {src}, Target: {target}')

                # Log raw data
                print(f'    Raw Data:')
                print(log_raw_data(data))
    except PermissionError:
        print("Error: You must run this script as an administrator (sudo).")
    except Exception as e:
        print(f"An error occurred: {e}")

# Start the main function
if _name_ == "_main_":
    main()
